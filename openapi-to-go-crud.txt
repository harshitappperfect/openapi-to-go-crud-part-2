Here's how you can create a complete CRUD API project using Golang, OpenAPI specs (via `oapi-codegen`), PostgreSQL, and the Gin framework. I'll walk you through the steps, including the folder structure, and provide explanations to ensure the code runs without errors.

---

### Step 1: Install Dependencies
Ensure you have the necessary tools installed:

1. **Golang**: Install Golang from [official site](https://go.dev/).
2. **PostgreSQL**: Install PostgreSQL and set it up locally or via a cloud service.
3. **oapi-codegen**: Install with:
   ```bash
   go install github.com/deepmap/oapi-codegen/cmd/oapi-codegen@latest
   ```
4. **Gin**: Add it to your project:
   ```bash
   go get -u github.com/gin-gonic/gin
   ```
5. **PostgreSQL driver**: Add it:
   ```bash
   go get github.com/lib/pq
   ```

---

### Step 2: Project Structure
Set up the following folder structure:
```
crud-api/
│
├── openapi/
│   └── openapi.yaml
│
├── db/
│   ├── migrations/
│   └── database.go
│
├── handlers/
│   └── handlers.go
│
├── models/
│   └── models.go
│
├── generated/
│   ├── server.go
│   └── types.go
│
├── main.go
└── go.mod
```

---

### Step 3: Write OpenAPI Specification
Create `openapi/openapi.yaml` with a simple CRUD API definition:

```yaml
openapi: 3.0.0
info:
  title: Simple CRUD API
  version: 1.0.0

paths:
  /items:
    get:
      summary: Get all items
      responses:
        '200':
          description: List of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: Create an item
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '201':
          description: Created item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'

  /items/{id}:
    get:
      summary: Get an item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Item details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    put:
      summary: Update an item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Item'
      responses:
        '200':
          description: Updated item
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    delete:
      summary: Delete an item by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '204':
          description: No content

components:
  schemas:
    Item:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
```

---

### Step 4: Generate Code with `oapi-codegen`
Run the following command to generate Go code from the OpenAPI spec:

```bash
oapi-codegen --package=main --generate types,server,models openapi/openapi.yaml > generated/server.go
```

---

### Step 5: Database Setup
1. Create the database and a table:
   ```sql
   CREATE DATABASE crud_api;

   CREATE TABLE items (
       id SERIAL PRIMARY KEY,
       name TEXT NOT NULL,
       description TEXT
   );
   ```

2. Write `db/database.go`:
   ```go
   package db

   import (
       "database/sql"
       "log"

       _ "github.com/lib/pq"
   )

   var DB *sql.DB

   func Connect() {
       var err error
       DB, err = sql.Open("postgres", "postgres://username:password@localhost/crud_api?sslmode=disable")
       if err != nil {
           log.Fatalf("Failed to connect to database: %v", err)
       }

       if err = DB.Ping(); err != nil {
           log.Fatalf("Database unreachable: %v", err)
       }
       log.Println("Database connection established")
   }
   ```

---

### Step 6: Implement Handlers
Write `handlers/handlers.go`:

```go
package handlers

import (
    "crud-api/db"
    "crud-api/generated"
    "database/sql"
    "net/http"

    "github.com/gin-gonic/gin"
)

func GetItems(c *gin.Context) {
    rows, err := db.DB.Query("SELECT id, name, description FROM items")
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
        return
    }
    defer rows.Close()

    var items []generated.Item
    for rows.Next() {
        var item generated.Item
        if err := rows.Scan(&item.Id, &item.Name, &item.Description); err != nil {
            c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
            return
        }
        items = append(items, item)
    }
    c.JSON(http.StatusOK, items)
}

func CreateItem(c *gin.Context) {
    var item generated.Item
    if err := c.ShouldBindJSON(&item); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
        return
    }

    err := db.DB.QueryRow("INSERT INTO items (name, description) VALUES ($1, $2) RETURNING id", item.Name, item.Description).Scan(&item.Id)
    if err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
        return
    }
    c.JSON(http.StatusCreated, item)
}

// Add similar handlers for GetItemByID, UpdateItem, and DeleteItem
```

---

### Step 7: Main File
Write `main.go`:

```go
package main

import (
    "crud-api/db"
    "crud-api/generated"
    "crud-api/handlers"
    "log"

    "github.com/gin-gonic/gin"
)

func main() {
    db.Connect()

    router := gin.Default()

    router.GET("/items", handlers.GetItems)
    router.POST("/items", handlers.CreateItem)

    // Add routes for other handlers here

    log.Fatal(router.Run(":8080"))
}
```

---

### Step 8: Run the Application
1. Run migrations (if needed).
2. Start the application:
   ```bash
   go run main.go
   ```
3. Access the API at `http://localhost:8080`.

This provides a clear structure for expanding the project. Let me know if you want further clarifications or examples!